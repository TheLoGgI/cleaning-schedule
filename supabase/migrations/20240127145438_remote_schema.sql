
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE SCHEMA IF NOT EXISTS "supabase_migrations";

ALTER SCHEMA "supabase_migrations" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."InviteKey" (
    "id" bigint NOT NULL,
    "key" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "scheduleId" uuid NOT NULL
);

ALTER TABLE "public"."InviteKey" OWNER TO "postgres";

ALTER TABLE "public"."InviteKey" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."InviteKey_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."Role" (
    "id" smallint NOT NULL,
    "role" character varying DEFAULT 'user'::character varying NOT NULL
);

ALTER TABLE "public"."Role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Room" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "scheduleID" uuid NOT NULL,
    "activeInSchedule" boolean DEFAULT false NOT NULL,
    "roomNr" integer NOT NULL,
    "userId" uuid
);

ALTER TABLE "public"."Room" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Schedule" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "startingWeek" smallint NOT NULL,
    "name" character varying NOT NULL,
    "isActive" boolean DEFAULT false NOT NULL,
    "createdBy" uuid NOT NULL
);

ALTER TABLE "public"."Schedule" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ScheduleRow" (
    "id" bigint NOT NULL,
    "room" uuid,
    "scheduleId" uuid NOT NULL,
    "weekNr" smallint DEFAULT '0'::smallint NOT NULL,
    "show" boolean DEFAULT true
);

ALTER TABLE "public"."ScheduleRow" OWNER TO "postgres";

ALTER TABLE "public"."ScheduleRow" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Schedule Row_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."ScheduleRole" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "role" smallint NOT NULL,
    "scheduleId" uuid NOT NULL,
    "userId" uuid NOT NULL,
    "authId" uuid NOT NULL
);

ALTER TABLE "public"."ScheduleRole" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."User" (
    "firstName" character varying NOT NULL,
    "lastName" character varying,
    "email" character varying,
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "authId" uuid,
    "premium" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."User" OWNER TO "postgres";

ALTER TABLE "public"."Role" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."role_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "supabase_migrations"."schema_migrations" (
    "version" text NOT NULL,
    "statements" text[],
    "name" text
);

ALTER TABLE "supabase_migrations"."schema_migrations" OWNER TO "postgres";

ALTER TABLE ONLY "public"."InviteKey"
    ADD CONSTRAINT "InviteKey_key_key" UNIQUE ("key");

ALTER TABLE ONLY "public"."InviteKey"
    ADD CONSTRAINT "InviteKey_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Room"
    ADD CONSTRAINT "Rooms_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ScheduleRow"
    ADD CONSTRAINT "Schedule Row_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ScheduleRole"
    ADD CONSTRAINT "ScheduleRole_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."User"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Role"
    ADD CONSTRAINT "role_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Schedule"
    ADD CONSTRAINT "schedule_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "supabase_migrations"."schema_migrations"
    ADD CONSTRAINT "schema_migrations_pkey" PRIMARY KEY ("version");

ALTER TABLE ONLY "public"."InviteKey"
    ADD CONSTRAINT "InviteKey_scheduleId_fkey" FOREIGN KEY ("scheduleId") REFERENCES public."Schedule"(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Room"
    ADD CONSTRAINT "Room_scheduleID_fkey" FOREIGN KEY ("scheduleID") REFERENCES public."Schedule"(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Room"
    ADD CONSTRAINT "Room_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON DELETE SET NULL;

ALTER TABLE ONLY "public"."ScheduleRole"
    ADD CONSTRAINT "ScheduleRole_role_fkey" FOREIGN KEY (role) REFERENCES public."Role"(id);

ALTER TABLE ONLY "public"."ScheduleRole"
    ADD CONSTRAINT "ScheduleRole_scheduleId_fkey" FOREIGN KEY ("scheduleId") REFERENCES public."Schedule"(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ScheduleRole"
    ADD CONSTRAINT "ScheduleRole_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ScheduleRow"
    ADD CONSTRAINT "ScheduleRow_room_fkey" FOREIGN KEY (room) REFERENCES public."Room"(id) ON DELETE SET DEFAULT;

ALTER TABLE ONLY "public"."ScheduleRow"
    ADD CONSTRAINT "ScheduleRow_scheduleId_fkey" FOREIGN KEY ("scheduleId") REFERENCES public."Schedule"(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."User"
    ADD CONSTRAINT "User_authId_fkey" FOREIGN KEY ("authId") REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."Room" FOR DELETE USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."Schedule" FOR DELETE USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."ScheduleRow" FOR DELETE TO authenticated USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."InviteKey" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."Room" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."Schedule" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."ScheduleRole" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."ScheduleRow" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."User" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."InviteKey" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."Role" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."Room" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."Schedule" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."ScheduleRole" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."ScheduleRow" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."User" FOR SELECT USING (true);

CREATE POLICY "Enable update for users based on email" ON "public"."Room" FOR UPDATE USING (true);

CREATE POLICY "Enable update for users based on email" ON "public"."Schedule" FOR UPDATE USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."ScheduleRow" FOR UPDATE TO authenticated USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."User" FOR UPDATE USING (true) WITH CHECK (true);

ALTER TABLE "public"."InviteKey" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Role" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Room" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."Schedule" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ScheduleRole" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ScheduleRow" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."User" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."InviteKey" TO "anon";
GRANT ALL ON TABLE "public"."InviteKey" TO "authenticated";
GRANT ALL ON TABLE "public"."InviteKey" TO "service_role";

GRANT ALL ON SEQUENCE "public"."InviteKey_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."InviteKey_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."InviteKey_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."Role" TO "anon";
GRANT ALL ON TABLE "public"."Role" TO "authenticated";
GRANT ALL ON TABLE "public"."Role" TO "service_role";

GRANT ALL ON TABLE "public"."Room" TO "anon";
GRANT ALL ON TABLE "public"."Room" TO "authenticated";
GRANT ALL ON TABLE "public"."Room" TO "service_role";

GRANT ALL ON TABLE "public"."Schedule" TO "anon";
GRANT ALL ON TABLE "public"."Schedule" TO "authenticated";
GRANT ALL ON TABLE "public"."Schedule" TO "service_role";

GRANT ALL ON TABLE "public"."ScheduleRow" TO "anon";
GRANT ALL ON TABLE "public"."ScheduleRow" TO "authenticated";
GRANT ALL ON TABLE "public"."ScheduleRow" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Schedule Row_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Schedule Row_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Schedule Row_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."ScheduleRole" TO "anon";
GRANT ALL ON TABLE "public"."ScheduleRole" TO "authenticated";
GRANT ALL ON TABLE "public"."ScheduleRole" TO "service_role";

GRANT ALL ON TABLE "public"."User" TO "anon";
GRANT ALL ON TABLE "public"."User" TO "authenticated";
GRANT ALL ON TABLE "public"."User" TO "service_role";

GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
